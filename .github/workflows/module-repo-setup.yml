---
name: module-repo-setup
on:
  workflow_dispatch:
    inputs:
      force-apply:
        description: "If true, force apply the terraform plan."
        required: false
        type: boolean
        default: false
      unlock-lock-id:
        description: "If non-empty, forcefully unlock terraform state by ID."
        required: false
        type: string
        default: ""
      create_repo: # Define create_repo as an input
        description: "(optional) Enter Terraform Module Repository Name to create."
        required: false
        type: string
        default: ""
  pull_request:
    types: [opened, synchronize, reopened, ready_for_review]
    paths:
      - .github/workflows/module-repo-setup.yml
      - terraform/**

env:
  # renovate: github=opentofu/opentofu
  TF_VERSION: v1.7.1
  TF_IN_AUTOMATION: true
  TF_INPUT: false
  # https://developer.hashicorp.com/terraform/cli/commands#upgrade-and-security-bulletin-checks
  CHECKPOINT_DISABLE: true
  ARM_PARTNER_ID: "1782f57c-edb6-4bf8-bd26-c7e0ef75c1e8"
  # ARM_USE_CLI Never works for SPN
  ARM_USE_CLI: "false"
  ## Should OIDC be used for Authentication?
  # ref: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-azure
  ARM_USE_OIDC: "false"
  ARM_OIDC_TOKEN_FILE_PATH: "${{ false && format('{0}/.az-token', github.workspace) || '' }}"
  AZURE_TENANT_ID: ${{ secrets.ORGA_CDT_TENANT_ID }}
  AZURE_SUBSCRIPTION_ID: ${{ vars.ARM_SUBSCRIPTION_ID }}
  AZURE_CLIENT_ID: ${{ secrets.ORGA_CDT_CLIENT_ID }}
  AZURE_CLIENT_SECRET: ${{ secrets.ORGA_CDT_CLIENT_SECRET }}
  WORKING_DIRECTORY: "terraform"
  # How to generate this:
  # cd prod-opsstack/terraform && tofu init -upgrade -backend=false && tofu providers lock -platform=darwin_arm64 -platform=darwin_arm64 -platform=linux_arm64 -platform=linux_amd64 && cat .terraform.lock.hcl
  #language=hcl-terraform
  TERRAFORM_LOCKFILE: |
    # This file is maintained automatically by "tofu init".
    # Manual edits may be lost in future updates.
      
    provider "registry.opentofu.org/hashicorp/azurerm" {
      version = "3.105.0"
      hashes = [
      "h1:OEMCsNLeyQRhX/RruOQLe84OLrZf7O5xmNmEAphJUl0=",
      "zh:00748b89bacd4c08d38727046007ad2a699277972f4f8f5ba640150c5e053fb2",
      "zh:1876ef996d50d5242961f289f67fcf63d3c94a91f1f2dde29f9ddc7ef1e5ed9b",
      "zh:21fc2fb446891d8eb041afb173bbd953ce0a7042a48095ae0a21fb9de708d8c2",
      "zh:72510c9806e44d9eb990cc43673a8a943f721c5a3367b7071ddc800b45fc1240",
      "zh:95a08c75adf1507c3a44ddb7609716737137a1d693cc6684ad099f57110b5e08",
      "zh:a521a6f9225a0a38efb29a279a5c518018f396baa4b4d8dd4167fc4b6395096e",
      "zh:b751de9866ee9dd8612a8679d13c67da18ce8348159155c9a0b5a9fc61a3cee2",
      "zh:b908a5ca19b73d731c581bfe77aa090d674b028f8a5cce4244a06c5c688d9adb",
      "zh:e86b4bec22eef7596b4411e09b923635a11a3144567ae0e86c4050bca1e1729f",
      "zh:ee3df966d8a50441dba12bf64063eb91c1ee2f0e4ebe1abee0322f9a9126318c",
      ]
    }
      
    provider "registry.opentofu.org/integrations/github" {
      version     = "6.2.1"
      constraints = "~> 6.0"
      hashes = [
      "h1:ip7024qn1ewDqlNucxh07DHvuhSLZSqtTGewxNLeYYU=",
      "zh:172aa5141c525174f38504a0d2e69d0d16c0a0b941191b7170fe6ae4d7282e30",
      "zh:1a098b731fa658c808b591d030cc17cc7dfca1bf001c3c32e596f8c1bf980e9f",
      "zh:245d6a1c7e632d8ae4bdd2da2516610c50051e81505cf420a140aa5fa076ea90",
      "zh:43c61c230fb4ed26ff1b04b857778e65be3d8f80292759abbe2a9eb3c95f6d97",
      "zh:59bb7dd509004921e4322a196be476a2f70471b462802f09d03d6ce96f959860",
      "zh:5cb2ab8035d015c0732107c109210243650b6eb115e872091b0f7b98c2763777",
      "zh:69d2a6acfcd686f7e859673d1c8a07fc1fc1598a881493f19d0401eb74c0f325",
      "zh:77f36d3f46911ace5c50dee892076fddfd64a289999a5099f8d524c0143456d1",
      "zh:87df41097dfcde72a1fbe89caca882af257a4763c2e1af669c74dcb8530f9932",
      "zh:899dbe621f32d58cb7c6674073a6db8328a9db66eecfb0cc3fc13299fd4e62e7",
      "zh:ad2eb7987f02f7dd002076f65a685730705d04435313b5cf44d3a6923629fb29",
      "zh:b2145ae7134dba893c7f74ad7dfdc65fdddf6c7b1d0ce7e2f3baa96212322fd8",
      "zh:bd6bae3ac5c3f96ad9219d3404aa006ef1480e9041d4c95df1808737e37d911b",
      "zh:e89758b20ae59f1b9a6d32c107b17846ddca9634b868cf8f5c927cbb894b1b1f",
      ]
    }
#language=hcl
  TFVARS_FILE: |
    github_token = "${{ secrets.MANAGE_REPOS_GITHUB_TOKEN }}"
    create_repo = ${{ toJson(inputs.create_repo) }}
  # secret MANAGE_REPOS_GITHUB_TOKEN == Keeper/GitHub cloudeteerbot/terraform-governance-managed-repos (https://keepersecurity.eu/vault/#detail/4y33tgsK_Yuv8mJUXDUPrQ)

concurrency:
  group: terraform

jobs:
  plan:
    name: Plan
    environment: Terraform (Plan)
    runs-on: ubuntu-latest
    timeout-minutes: 60
    env:
      TF_LOCK: false
    defaults:
      run:
        working-directory: "${{ env.WORKING_DIRECTORY }}"
    outputs:
      exit-code: ${{ steps.plan.outputs.exitcode }}
    steps:
      - uses: actions/checkout@v4

      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TF_VERSION }}
          tofu_wrapper: false

      - name: az login
        run: |-
          if [ "${ARM_USE_OIDC}" == "true" ]; then
            echo "Run az login with federated credentials"
            OIDC_TOKEN_JSON="$(curl -sSf -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange")"
            OIDC_TOKEN="$(jq -r '.value' <<< "${OIDC_TOKEN_JSON}")"
            printf '%s' "${OIDC_TOKEN}" >"${ARM_OIDC_TOKEN_FILE_PATH}"

            az login --service-principal -t "$AZURE_TENANT_ID" -u "$AZURE_CLIENT_ID" --federated-token "$OIDC_TOKEN" -o table
          else
            echo "Run az login with password"
            az login --service-principal -t "$AZURE_TENANT_ID" -u "$AZURE_CLIENT_ID" -p="$AZURE_CLIENT_SECRET" -o table
          fi

          az account set -s "${AZURE_SUBSCRIPTION_ID}"
        env:
          AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: write additional terraform files
        run: |-
          test -f ".terraform.lock.hcl" || printf '%s' "${TERRAFORM_LOCKFILE}" > ".terraform.lock.hcl"
          printf '%s' "${TFVARS_FILE}" > "pipeline.auto.tfvars"
        env:
          TFVARS_FILE: "${{ env.TFVARS_FILE }}"
          TERRAFORM_LOCKFILE: "${{ env.TERRAFORM_LOCKFILE }}"

      - name: tofu init
        run: tofu init
        working-directory: "${{ env.WORKING_DIRECTORY }}"
        env:
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          TF_LOG: "${{ runner.debug && 'trace' || '' }}"

      - name: tofu force-unlock
        if: ${{ github.event.inputs.unlock-lock-id }}
        run: tofu force-unlock "${{ github.event.inputs.unlock-lock-id }}" -force
        env:
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}

      - name: tofu plan
        id: plan
        run: |
          set +e
          tofu plan -out terraform.tfplan -detailed-exitcode ${{ !env.RUN_APPLY && '-lock=false' || '' }}

          EXIT_CODE=$?
          if [ $EXIT_CODE -ne 2 ] && [ $EXIT_CODE -ne 0 ]; then
            exit $EXIT_CODE
          fi

          echo "exitcode=$EXIT_CODE" >> $GITHUB_OUTPUT
        env:
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          TF_LOG: "${{ runner.debug && 'trace' || '' }}"

      - uses: actions/upload-artifact@v4
        with:
          name: terraform.tfplan
          path: ${{ env.WORKING_DIRECTORY }}/terraform.tfplan

  apply:
    if: ${{ !cancelled() && !failure() && (inputs.force-apply || github.event.pull_request.draft == false && needs.plan.outputs.exit-code == 2) }}
    name: Apply
    environment: Terraform
    runs-on: ubuntu-latest
    timeout-minutes: 60
    defaults:
      run:
        working-directory: "${{ env.WORKING_DIRECTORY }}"
    needs: [plan]
    steps:
      - uses: actions/checkout@v4

      - uses: actions/download-artifact@v4
        with:
          name: terraform.tfplan
          path: ${{ env.WORKING_DIRECTORY }}

      - uses: opentofu/setup-opentofu@v1
        with:
          tofu_version: ${{ env.TF_VERSION }}
          tofu_wrapper: false

      - name: az login
        run: |-
          if [ "${ARM_USE_OIDC}" == "true" ]; then
            echo "Run az login with federated credentials"
            OIDC_TOKEN_JSON="$(curl -sSf -H "Authorization: bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" "$ACTIONS_ID_TOKEN_REQUEST_URL&audience=api://AzureADTokenExchange")"
            OIDC_TOKEN="$(jq -r '.value' <<< "${OIDC_TOKEN_JSON}")"
            printf '%s' "${OIDC_TOKEN}" >"${ARM_OIDC_TOKEN_FILE_PATH}"

            az login --service-principal -t "$AZURE_TENANT_ID" -u "$AZURE_CLIENT_ID" --federated-token "$OIDC_TOKEN" -o table
          else
            echo "Run az login with password"
            az login --service-principal -t "$AZURE_TENANT_ID" -u "$AZURE_CLIENT_ID" -p="$AZURE_CLIENT_SECRET" -o table
          fi

          az account set -s "${AZURE_SUBSCRIPTION_ID}"
        env:
          AZURE_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          AZURE_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          AZURE_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          AZURE_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}

      - name: write additional terraform files
        run: |-
          test -f ".terraform.lock.hcl" || printf '%s' "${TERRAFORM_LOCKFILE}" > ".terraform.lock.hcl"
          printf '%s' "${TFVARS_FILE}" > "pipeline.auto.tfvars"
        env:
          TFVARS_FILE: "${{ env.TFVARS_FILE }}"
          TERRAFORM_LOCKFILE: "${{ env.TERRAFORM_LOCKFILE }}"

      - name: tofu init
        run: tofu init
        env:
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          TF_LOG: "${{ runner.debug && 'trace' || '' }}"

      - name: tofu apply
        run: tofu apply terraform.tfplan
        env:
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          TF_LOG: "${{ runner.debug && 'trace' || '' }}"

      - name: Unlock terraform state if job was canceled
        if: ${{ cancelled() }}
        continue-on-error: true
        run: tofu force-unlock -force $(tofu force-unlock -force "unknown" |& grep -e "^  ID:" | cut -d':' -f2 | tr -d '[[:space:]]')
        env:
          ARM_TENANT_ID: ${{ env.AZURE_TENANT_ID }}
          ARM_SUBSCRIPTION_ID: ${{ env.AZURE_SUBSCRIPTION_ID }}
          ARM_CLIENT_ID: ${{ env.AZURE_CLIENT_ID }}
          ARM_CLIENT_SECRET: ${{ env.AZURE_CLIENT_SECRET }}
          TF_LOG: "${{ runner.debug && 'trace' || '' }}"
